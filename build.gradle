import org.gradle.nativeplatform.platform.internal.DefaultNativePlatform

plugins {
	id 'org.springframework.boot' version '2.2.5.RELEASE'
	id 'io.spring.dependency-management' version '1.0.9.RELEASE'
	id 'java'
	id 'com.palantir.docker' version '0.25.0'
	id 'com.palantir.docker-run' version '0.25.0'
}

apply plugin: 'java'
apply plugin: 'jacoco'
apply plugin: "groovy"

group = 'com.pkg'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'
targetCompatibility = '11'

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-web-services'
	implementation 'org.springframework.boot:spring-boot-starter-actuator'

	compile group: 'org.apache.httpcomponents', name: 'httpclient', version: '4.5.12'

	// Lombok Annotation
	compileOnly 'org.projectlombok:lombok:1.18.12'
	annotationProcessor 'org.projectlombok:lombok:1.18.12'

	// Spring retry
	compile group: 'org.springframework.retry', name: 'spring-retry', version: '1.2.1.RELEASE'

	// Test Related Dependency
	testCompile group: 'uk.co.jemos.podam', name: 'podam', version: '7.1.0.RELEASE'
	testCompile group: 'org.springframework.boot', name: 'spring-boot-starter-test', version: '2.1.3.RELEASE'
	compile group: 'org.codehaus.groovy', name: 'groovy-all', version: '2.4.1'
	testCompile group: 'org.spockframework', name: 'spock-core', version: '1.0-groovy-2.4'
	testCompile group: 'cglib', name: 'cglib-nodep', version: '3.2.5'
}

sourceSets{
	test{
		java.srcDirs = ['src/test/groovy']
	}
}


String dockerHubUsernameProperty = findProperty('dockerHubUsername') ?: 'justacoder7'
String imageName = "${dockerHubUsernameProperty}/football-league-app:$version"

docker {
	name imageName
	files "build/libs/${bootJar.archiveFileName.get()}"
	buildArgs([JAR_FILE: bootJar.archiveFileName.get()])
}

dockerRun {
	name project.name
	image imageName
	ports '8080:8080'
	clean true
}

// Jacoco For Code Coverage
jacoco {
	toolVersion = "0.8.3"
}

def jacocoExcludes = [
		'com/pkg/config/**',
		'com/pkg/dto/**',
		'com/pkg/exception/**',
		'com/pkg/utility/**',
		'com/pkg/controller/**',
		'com/pkg/model/**',
		'com/pkg/FootballLeagueApplication**'
]

jacocoTestCoverageVerification {
	afterEvaluate {

		getClassDirectories().setFrom(classDirectories.files.collect {
			fileTree(dir: it, exclude: jacocoExcludes)
		})
	}
	violationRules {
		rule {
			limit {
				minimum = 0.5
			}
		}
	}
}

jacocoTestReport {
	reports {
		html.enabled true
	}
	afterEvaluate {
		getClassDirectories().setFrom(classDirectories.files.collect {
			fileTree(dir: it, exclude: jacocoExcludes)
		})
	}
}

test.finalizedBy jacocoTestReport
check.dependsOn jacocoTestCoverageVerification